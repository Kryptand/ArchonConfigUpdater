name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        architecture: [x64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          
      - name: Set version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        
      - name: Update version in project file
        run: |
          sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/g" ArchonConfigUpdater.csproj
          sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$VERSION<\/AssemblyVersion>/g" ArchonConfigUpdater.csproj
          sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$VERSION<\/FileVersion>/g" ArchonConfigUpdater.csproj

      - name: Install dependencies
        run: dotnet restore

      - name: Build for macOS ARM64
        if: matrix.os == 'macos-latest' && matrix.architecture == 'arm64'
        run: |
          dotnet publish -c Release --self-contained true -r osx-arm64 -p:PublishSingleFile=true

      - name: Build for Windows x64
        if: matrix.os == 'windows-latest' && matrix.architecture == 'x64'
        run: |
          dotnet publish -c Release --self-contained true -r win-x64 -p:PublishSingleFile=true

      - name: Build for Windows ARM64
        if: matrix.os == 'windows-latest' && matrix.architecture == 'arm64'
        run: |
          dotnet publish -c Release --self-contained true -r win-arm64 -p:PublishSingleFile=true

      - name: Compress macOS ARM64 artifact
        if: matrix.os == 'macos-latest' && matrix.architecture == 'arm64'
        run: zip -r macos-latest-arm64.zip ./bin/Release/net8.0/osx-arm64/publish/

      - name: Compress Windows x64 artifact
        if: matrix.os == 'windows-latest' && matrix.architecture == 'x64'
        run: zip -r windows-latest-x64.zip ./bin/Release/net8.0/win-x64/publish/

      - name: Compress Windows ARM64 artifact
        if: matrix.os == 'windows-latest' && matrix.architecture == 'arm64'
        run: zip -r windows-latest-arm64.zip ./bin/Release/net8.0/win-arm64/publish/

      - name: Upload artifact for macOS ARM64
        if: matrix.os == 'macos-latest' && matrix.architecture == 'arm64'
        uses: actions/upload-artifact@v3
        with:
          name: macos-latest-arm64
          path: macos-latest-arm64.zip

      - name: Upload artifact for Windows x64
        if: matrix.os == 'windows-latest' && matrix.architecture == 'x64'
        uses: actions/upload-artifact@v3
        with:
          name: windows-latest-x64
          path: windows-latest-x64.zip

      - name: Upload artifact for Windows ARM64
        if: matrix.os == 'windows-latest' && matrix.architecture == 'arm64'
        uses: actions/upload-artifact@v3
        with:
          name: windows-latest-arm64
          path: windows-latest-arm64.zip

  release:
    needs: build-and-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./release

      - name: List downloaded artifacts
        run: ls -R ./release

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./release/windows-latest-x64/*.zip
            ./release/windows-latest-arm64/*.zip
            ./release/macos-latest-arm64/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}